import chalk from "chalk";
import { v4 as uuidv4 } from "uuid";
import { createLogInFile } from "./logManager.js";
import { task } from "./cron.js";

const defaultOptions = {
  logToFile: true,
  sizeLogFile: 5,
  colorize: true,
  infoColor: "magenta",
  errorColor: "red",
};
export function logger(options = defaultOptions) {
  if (options.logToFile){
    task(options.sizeLogFile);
  } 
  return async (req, res, next) => {
    const start = Date.now();
    const timestamp = new Date();
    const method = req.method;
    const url = req.url;
    const clientIP = req.connection.remoteAddress;
    const referrer = req.headers ? req.headers["referrer"] : "";
    const bodyParams = req.body ? JSON.stringify(req.body) : {};
    const logMessage = `\nStarted ${method} ${url} for :: ${
      referrer ? referrer : clientIP
    } at ${timestamp}
  Parameters in body: ${bodyParams}`;

    if (options.colorize) {
      console.log(chalk[options.infoColor](logMessage));
    } else {
      console.log(logMessage);
    }
    if (options.logToFile) await createLogInFile(logMessage);

    const errorStatus = [400, 401, 403, 404, 405, 500, 502, 503];
    res.on("finish", async () => {
      const status = res.statusCode;
      const statusMessage = res.statusText ? res.statusText : "";
      const requestId = uuidv4();
      const end = Date.now();
      const responseTime = end - start;
      const responseText = `\nCompleted: ${status} message: ${statusMessage} Time response: ${responseTime} ms Request ID: [${requestId}]\n`;

      if (options.colorize && errorStatus.includes(status)) {
        console.error(chalk[options.errorColor](responseText));
      } else if (options.colorize) {
        console.log(chalk.green(responseText));
      } else {
        console.log(responseText);
      }

      if (options.logToFile) {
        await createLogInFile(responseText);
      }
    });
    next();
  };
  
}

